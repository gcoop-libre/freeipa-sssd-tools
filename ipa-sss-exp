#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2023 Osiris Alejandro Gomez <osiux@osiux.com>
# Copyright (C) 2023 Osiris Alejandro Gomez <osiris@gcoop.coop>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC1090
# shellcheck disable=SC1091
# shellcheck disable=SC2002

DIR_BIN="$(dirname "$0")" && source "$DIR_BIN/ipa-src-cfg"

function usage()
{
cat << EOF

## \`$BIN\` Filter SynLog when record date match with accountExpires date

### Usage:

\`\`\`bash

  $BIN [IPA_SSS_SYN_LOG] [DATE]

\`\`\`

### Description

When a date is not specified, all the dates of the log are obtained,
otherwise it is filtered by the indicated date.

### Example:

\`\`\`bash

	$BIN

\`\`\`

EOF
exit 0
}

[[ "$1" =~ ^[-]+(h|help) ]] && usage

[[ -n "$BASH_DEBUG" ]] && set -x
[[ -n "$LOG"        ]] || LOG='/var/log/ipa-sss-syn.log'
[[ -z "$1"          ]] || LOG="$1"
[[ -z "$2"          ]] || DATE="$2"
[[ -e "$LOG"        ]] || die "NOT FOUND FILE $LOG"
[[ -n "$FILTER"     ]] || FILTER="^$DATE.*sss_cache=0"
[[ -z "$3"          ]] || OUT="$3"
[[ -n "$C_AXP1"     ]] || C_AXP1=14

TMP="$(mktemp --suffix .log)"

if [[ -n "$DATE" ]]
then
  [[ -n "$OUT" ]] || OUT="$DATE-accountExpires-ipa-sss-syn.log"
  echo "$DATE" > "$TMP"
else
  [[ -n "$OUT" ]] || OUT="accountExpires-ipa-sss-syn.log"
  awk '{print $1}' "$LOG" | sort -u > "$TMP"
fi


while read -r DATE
do

  awk "(\$1 ~ /$DATE/ && \$$C_AXP1 ~ /accountExpires=$DATE.*/) {print \$1, \$2, \$4, \$14, \$19, \$23}" "$LOG"

done < "$TMP" > "$OUT"

wc -l "$OUT"
